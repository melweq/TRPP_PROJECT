from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN

import sqlite3

#–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async def db_connect() -> None:
    global conn, cursor
    conn = sqlite3.connect('database.db',)
    cursor = conn.cursor()

#–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
async def db_table_val(user_id: int, user_name: str):
	cursor.execute('INSERT INTO MireaShop (user_id, user_name) VALUES (?, ?)', (user_id, user_name))
	conn.commit()


from keyboards import *

bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)


async def on_startup(_):
    await db_connect()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")




#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    #await message.reply("<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MireaShopBot!</b>", reply_markup=main_klava)

    #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ò–º—è
    us_id = message.from_user.id
    us_name = message.from_user.first_name

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    cursor.execute('SELECT * FROM MireaShop WHERE user_id=?', (us_id,))
    if cursor.fetchone() is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
        await message.reply("<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MireaShopBot!</b>", reply_markup=main_klava)

        await db_table_val(user_id=us_id, user_name=us_name)

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î
        await message.reply("<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫</b>", reply_markup=main_klava)



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:

@dp.message_handler(lambda message: message.text =="–ö—É–ø–∏—Ç—å üí∞")
async def buy(message: types.Message):
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup = catalog_clava)

@dp.message_handler(lambda message: message.text =="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ü§î")
async def info(message: types.Message):
    await message.reply("<b>–°–æ–∑–¥–∞–Ω–æ by:</b> –ï–≥–æ—Ä", reply_markup = info_clava)

@dp.message_handler(lambda message: message.text =="–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ üõí")
async def stocknal(message: types.Message):
    await message.reply("".join(stock), reply_markup = main_klava)

@dp.message_handler(lambda message: message.text =="–ü—Ä–æ—Ñ–∏–ª—å üë§")
async def profile(message: types.Message):
    cursor.execute(f'SELECT balance FROM MireaShop WHERE user_id = {message.from_user.id}') #–ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
    getbalance1 = cursor.fetchone()
    getbalance = str(getbalance1).replace(')', '').replace('(', '').replace(',', '') #—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    cursor.execute(f'SELECT sum_buy FROM MireaShop WHERE user_id = {message.from_user.id}') #–ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
    getsumbuy1 = cursor.fetchone()
    getsumbuy = str(getsumbuy1).replace(')', '').replace('(', '').replace(',', '') #—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    await message.reply(f"<b>üï∂Ô∏è –í–∞—à ID:</b> {message.from_user.id}\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {getbalance}—Ä\n<b>üõí –ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É:</b> {getsumbuy}—Ä", reply_markup = catalog_clava)




#–¢–ï–°–¢–ò–†–£–Æ --------------------------------------------------------------------------------------------------------------


    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    cursor.execute(f'SELECT balance FROM MireaShop WHERE user_id = {message.from_user.id}')
    testbalance = cursor.fetchone()
    cursor.execute(f'SELECT price FROM Products WHERE product_id = 1')
    testprice = cursor.fetchone()

    testbalance = str(testbalance).replace(')', '').replace('(', '').replace(',', '') #—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testbalance = int(testbalance)
    testprice = str(testprice).replace(')', '').replace('(', '').replace(',', '') #—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testprice = int(testprice)

    #print(testbalance, testprice)

    if testbalance >= testprice:

        # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫
        cursor.execute(f'SELECT log_pass FROM Products WHERE product_id = 1')
        test1 = cursor.fetchone()

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–¥–∞—á–∏
        test1 = str(test1).replace(')', '').replace('(', '').replace(',', '').replace("'", '')
        await message.reply(f"–¢–µ—Å—Ç:\n{test1} ", reply_markup=catalog_clava)

        #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        #def delete_product(loginpassword):
            #cursor.execute('DELETE FROM Products WHERE log_pass=?', (loginpassword,))
            #conn.commit()
        #—É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        #delete_product(test1)

        cursor.execute(f'SELECT balance FROM MireaShop WHERE user_id = {message.from_user.id}')
        getbalance2 = cursor.fetchone()
        getbalance2 = str(getbalance2).replace(')', '').replace('(', '').replace(',', '') #—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        getbalance2 = int(getbalance2); getbalance2 -= testprice  #–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ INT

        #–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        sql_update_query = f"""Update MireaShop set balance = {getbalance2} where user_id = {message.from_user.id}"""
        cursor.execute(sql_update_query)
        conn.commit()

    else:
        await message.reply(f"–¢–µ—Å—Ç:\n–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. ", reply_markup=catalog_clava)






#–ö–û–ù–ï–¶ –¢–ï–°–¢–û–í–û–ô –ß–ê–°–¢–ò --------------------------------------------------------------------------------------------------



@dp.message_handler(lambda message: message.text =="Steam")
async def steam(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup = markupInline_steam)

@dp.message_handler(lambda message: message.text =="Origin")
async def origin(message: types.Message):
    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>", reply_markup = markupInline_origin)

@dp.message_handler(lambda message: message.text =="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back(message: types.Message):
    await message.reply("<b>–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>", reply_markup = main_klava)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏

@dp.callback_query_handler(lambda c: c.data == 'yes')
async def process_callback_yes(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä!\n\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ: 500—Ä")
    await bot.send_message(callback_query.from_user.id, '<b>–î–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:</b> login:password')

@dp.callback_query_handler(lambda c: c.data == 'no')
async def process_callback_no(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É, –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_klava)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:

@dp.callback_query_handler(lambda c: c.data == '1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)

@dp.callback_query_handler(lambda c: c.data == '2')
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)

@dp.callback_query_handler(lambda c: c.data == '3')
async def process_callback_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)

@dp.callback_query_handler(lambda c: c.data == '4')
async def process_callback_button4(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,"<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)


@dp.callback_query_handler(lambda c: c.data == '5')
async def process_callback_button5(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)

@dp.callback_query_handler(lambda c: c.data == '6')
async def process_callback_button6(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "<b>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", reply_markup=markupInline_confirm)











#–î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
if __name__ == '__main__':
    executor.start_polling(dp, on_startup = on_startup)